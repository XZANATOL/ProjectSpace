#!/usr/bin/env python3

import json
import locale
import sys

# Imports for using pdf
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# Imporst for sending emails
import email.message
import mimetypes
import os.path
import smtplib

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}

  # Custom variables for challenge 1
  most_sales = 0
  most_sales_model = ""
  # Custom variables for challenge 2
  counter = {}
  temp = 0
  last = []
  # ===================================
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > most_sales:
      most_sales = item["total_sales"]
      most_sales_model = item["car"]["car_make"] + " " + item["car"]["car_model"] + " ({})".format(item["car"]["car_year"])
    # TODO: also handle most popular car_year
    if item["car"]["car_year"] in counter:
      counter[item["car"]["car_year"]] += item["total_sales"]
    else:
      counter[item["car"]["car_year"]] = item["total_sales"]

  temp = sorted(counter.values())[-1]
  for value, key in enumerate(counter.items()):
    if key[1] == int(temp):
      last = [key[0], key[1]]
      break

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),

    "The {} had the most sales: {}".format(most_sales_model, most_sales),

    "The most popular year was {} with {} sales.".format(last[0], last[1])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # Formation of PDF file
  table = cars_dict_to_table(data)
  print(table)

  report = SimpleDocTemplate("/tmp/cars.pdf")
  styles = getSampleStyleSheet()
  # TODO: turn this into a PDF report
  report_title = Paragraph("Sales summary for last month", styles["h1"])

  table_style = [("GRID", (0,0), (-1,-1), 1, colors.black)]
  report_table = Table(data=table, style=table_style, hAlign="LEFT")
  report.build([report_title, Paragraph(summary[0]), Paragraph(summary[1]), Paragraph(summary[2]), report_table])
  # TODO: send the PDF report as an email attachment
  message = email.message.EmailMessage()
  message["From"] = "automation@example.com"
  message["To"] = "student-02-63964e6deed2@example.com"
  message["Subject"] = "Sales summary for last month"
  message.set_content("\n".join(summary))

  attachment_filename = os.path.basename("/tmp/cars.pdf")
  mime_type, _ = mimetypes.guess_type("/tmp/cars.pdf")
  mime_type, mime_subtype = mime_type.split("/", 1)

  with open("/tmp/cars.pdf", "rb") as ap:
    message.add_attachment(ap.read(), maintype=mime_type, subtype=mime_subtype, filename=attachment_filename)

  mail_server = smtplib.SMTP('localhost')
  mail_server.send_message(message)
  mail_server.quit()

if __name__ == "__main__":
  main(sys.argv)